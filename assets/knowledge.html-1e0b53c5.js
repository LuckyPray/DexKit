import{_ as i,r as d,o as r,c as n,d as e,e as t,a as s,b as a}from"./app-402d39cd.js";const o={},c=a('<h1 id="basic-knowledge" tabindex="-1"><a class="header-anchor" href="#basic-knowledge" aria-hidden="true">#</a> Basic Knowledge</h1><blockquote><p>Here we provide some basic knowledge to help you better understand the usage of <code>DexKit</code>. Experienced developers can skip this section.</p></blockquote><p>When using <code>DexKit</code>, there are some fundamental concepts you need to understand, including but not limited to:</p><ul><li>Dex Decompilation Tools</li><li>JVM Signatures <ul><li>Primitive Type Signatures</li><li>Reference Type Signatures</li><li>Array Type Signatures</li><li>Method Signatures</li><li>Field Signatures</li></ul></li></ul><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>The content in the basic knowledge is not necessarily completely accurate. Please read it according to your own understanding. If you find any inaccuracies, feel free to point them out and help improve.</p></div><h2 id="decompilation-tools" tabindex="-1"><a class="header-anchor" href="#decompilation-tools" aria-hidden="true">#</a> Decompilation Tools</h2>',6),h={href:"https://github.com/skylot/jadx",target:"_blank",rel:"noopener noreferrer"},y=a('<h2 id="jvm-signatures" tabindex="-1"><a class="header-anchor" href="#jvm-signatures" aria-hidden="true">#</a> JVM Signatures</h2><h3 id="primitive-types-primitivetype" tabindex="-1"><a class="header-anchor" href="#primitive-types-primitivetype" aria-hidden="true">#</a> Primitive Types (PrimitiveType)</h3><table><thead><tr><th style="text-align:left;">Type Signature</th><th style="text-align:left;">Primitive Type</th><th style="text-align:left;">Size (Bytes)</th></tr></thead><tbody><tr><td style="text-align:left;">V</td><td style="text-align:left;">void</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">Z</td><td style="text-align:left;">boolean</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">B</td><td style="text-align:left;">byte</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">C</td><td style="text-align:left;">char</td><td style="text-align:left;">2</td></tr><tr><td style="text-align:left;">S</td><td style="text-align:left;">short</td><td style="text-align:left;">2</td></tr><tr><td style="text-align:left;">I</td><td style="text-align:left;">int</td><td style="text-align:left;">4</td></tr><tr><td style="text-align:left;">J</td><td style="text-align:left;">long</td><td style="text-align:left;">8</td></tr><tr><td style="text-align:left;">F</td><td style="text-align:left;">float</td><td style="text-align:left;">4</td></tr><tr><td style="text-align:left;">D</td><td style="text-align:left;">double</td><td style="text-align:left;">8</td></tr></tbody></table><h3 id="reference-types-referencetype" tabindex="-1"><a class="header-anchor" href="#reference-types-referencetype" aria-hidden="true">#</a> Reference Types (ReferenceType)</h3><p>Reference types are divided into classes and arrays.</p><h4 id="class-classtype" tabindex="-1"><a class="header-anchor" href="#class-classtype" aria-hidden="true">#</a> Class (ClassType)</h4><p>The type signature of a class starts with <code>L</code>, followed by the fully qualified name (FullClassName) of the class, and ends with <code>;</code>. For example, <code>Ljava/lang/String;</code> represents the <code>java.lang.String</code> class.</p><p>For example:</p><table><thead><tr><th style="text-align:left;">Type Signature</th><th style="text-align:left;">Java Type Definition</th></tr></thead><tbody><tr><td style="text-align:left;">Ljava/lang/String;</td><td style="text-align:left;">java.lang.String</td></tr><tr><td style="text-align:left;">Ljava/util/List;</td><td style="text-align:left;">java.util.List</td></tr></tbody></table><h4 id="array-arraytype" tabindex="-1"><a class="header-anchor" href="#array-arraytype" aria-hidden="true">#</a> Array (ArrayType)</h4><p>The type signature of an array starts with <code>[</code>, followed by the type signature of the array elements. For example, <code>[[I</code> represents a two-dimensional array where the element type is <code>int</code>.</p><p>For example:</p><table><thead><tr><th style="text-align:left;">Type Signature</th><th style="text-align:left;">Java Type Definition</th></tr></thead><tbody><tr><td style="text-align:left;">[I</td><td style="text-align:left;">int[]</td></tr><tr><td style="text-align:left;">[[C</td><td style="text-align:left;">char[][]</td></tr><tr><td style="text-align:left;">[Ljava/lang/String;</td><td style="text-align:left;">java.lang.String[]</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>The term &#39;class&#39; and &#39;type&#39; are not entirely equivalent: &#39;type&#39; is Type, while &#39;class&#39; is Class. &#39;Class&#39; is a subset of &#39;type&#39;. For example:</p><ul><li><code>java.lang.Integer</code> is a &#39;class&#39; and also a &#39;type&#39;</li><li><code>java.lang.Integer[]</code> is an &#39;array type&#39;, but not a &#39;class&#39;</li><li><code>int</code> is a &#39;primitive type&#39;, but not a &#39;class&#39;</li></ul><p>For method parameters, return types, and field types, we use the term &#39;type,&#39; specifically &#39;Type.&#39;</p></div><h3 id="method-signatures" tabindex="-1"><a class="header-anchor" href="#method-signatures" aria-hidden="true">#</a> Method Signatures</h3><p>A method signature consists of the signature of the return type and the signature of the parameter types. For example, <code>()V</code> represents a parameterless <code>void</code> method.</p><p>For example:</p><blockquote><p>For ease of description, all methods in the table are named as <code>function</code>.</p></blockquote><table><thead><tr><th style="text-align:left;">Method Signature</th><th style="text-align:left;">Java Method Definition</th></tr></thead><tbody><tr><td style="text-align:left;">()V</td><td style="text-align:left;">void function()</td></tr><tr><td style="text-align:left;">(I)V</td><td style="text-align:left;">void function(int)</td></tr><tr><td style="text-align:left;">(II)V</td><td style="text-align:left;">void function(int, int)</td></tr><tr><td style="text-align:left;">(ILjava/lang/String;J)V</td><td style="text-align:left;">void function(int, java.lang.String, long)</td></tr><tr><td style="text-align:left;">(I[II)V</td><td style="text-align:left;">void function(int, int[], int)</td></tr><tr><td style="text-align:left;">([[Ljava/lang/String;)V</td><td style="text-align:left;">void function(java.lang.String[][])</td></tr><tr><td style="text-align:left;">()[Ljava/lang/String;</td><td style="text-align:left;">java.lang.String[] function()</td></tr></tbody></table><h3 id="method-prototype-shorthand-protoshorty" tabindex="-1"><a class="header-anchor" href="#method-prototype-shorthand-protoshorty" aria-hidden="true">#</a> Method Prototype Shorthand (ProtoShorty)</h3><p>The method prototype shorthand is a compact string representation of a method’s return and parameter types. Each character represents a type: the first character is the return type, and the remaining characters are the parameter types.</p><h4 id="type-character-mapping" tabindex="-1"><a class="header-anchor" href="#type-character-mapping" aria-hidden="true">#</a> Type Character Mapping</h4><table><thead><tr><th style="text-align:left;">Character</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">V</td><td style="text-align:left;">void</td><td style="text-align:left;">no value</td></tr><tr><td style="text-align:left;">Z</td><td style="text-align:left;">boolean</td><td style="text-align:left;">Boolean</td></tr><tr><td style="text-align:left;">B</td><td style="text-align:left;">byte</td><td style="text-align:left;">Byte</td></tr><tr><td style="text-align:left;">S</td><td style="text-align:left;">short</td><td style="text-align:left;">Short</td></tr><tr><td style="text-align:left;">C</td><td style="text-align:left;">char</td><td style="text-align:left;">Character</td></tr><tr><td style="text-align:left;">I</td><td style="text-align:left;">int</td><td style="text-align:left;">Integer</td></tr><tr><td style="text-align:left;">J</td><td style="text-align:left;">long</td><td style="text-align:left;">Long</td></tr><tr><td style="text-align:left;">F</td><td style="text-align:left;">float</td><td style="text-align:left;">Single‐precision floating point</td></tr><tr><td style="text-align:left;">D</td><td style="text-align:left;">double</td><td style="text-align:left;">Double‐precision floating point</td></tr><tr><td style="text-align:left;">L</td><td style="text-align:left;">Object</td><td style="text-align:left;">Reference type (including object arrays and primitive type arrays))</td></tr></tbody></table><h4 id="usage-examples" tabindex="-1"><a class="header-anchor" href="#usage-examples" aria-hidden="true">#</a> Usage Examples</h4><table><thead><tr><th style="text-align:left;">Shorthand</th><th style="text-align:left;">Corresponding Method Signature</th></tr></thead><tbody><tr><td style="text-align:left;">VL</td><td style="text-align:left;"><code>void method(Object)</code></td></tr><tr><td style="text-align:left;">ZLL</td><td style="text-align:left;"><code>boolean method(Object, Object)</code></td></tr><tr><td style="text-align:left;">VILFD</td><td style="text-align:left;"><code>void method(int, Object, long, float, double)</code></td></tr><tr><td style="text-align:left;">LL</td><td style="text-align:left;"><code>Object method(Object)</code></td></tr><tr><td style="text-align:left;">ILI</td><td style="text-align:left;"><code>int method(Object, int)</code></td></tr><tr><td style="text-align:left;">LIL</td><td style="text-align:left;"><code>Object method(int, Object)</code></td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>In the shorthand, all reference types (classes, interfaces, arrays, etc.) are represented by the character <code>L</code> to keep the string compact. This means <code>String</code>, <code>String[]</code>, <code>int[]</code>, and similar types are all encoded as <code>L</code>.</p></div><h2 id="dalvik-descriptor" tabindex="-1"><a class="header-anchor" href="#dalvik-descriptor" aria-hidden="true">#</a> Dalvik Descriptor</h2><p>In a Dex file, we can represent specific classes, methods, or fields using the &#39;Dalvik Descriptor.&#39; In <code>DexKit</code> API, the term &#39;descriptor&#39; is commonly used.</p><h3 id="class-descriptor" tabindex="-1"><a class="header-anchor" href="#class-descriptor" aria-hidden="true">#</a> Class Descriptor</h3><p>The format of a class descriptor is <code>[class signature]</code>, such as <code>Ljava/lang/String;</code>.</p><h3 id="method-descriptor" tabindex="-1"><a class="header-anchor" href="#method-descriptor" aria-hidden="true">#</a> Method Descriptor</h3><p>The format of a method descriptor is <code>[class signature]-&gt;[method name][method signature]</code>, such as <code>Ljava/lang/String;-&gt;length()I</code>.</p><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>In &#39;Dalvik Descriptor,&#39; the method name for constructors is <code>&lt;init&gt;</code>, and for static initialization methods, it&#39;s <code>&lt;clinit&gt;</code>. Therefore, in <code>DexKit</code>, to find constructors, you need to use <code>&lt;init&gt;</code> as the method name.</p></div><h3 id="field-descriptor" tabindex="-1"><a class="header-anchor" href="#field-descriptor" aria-hidden="true">#</a> Field Descriptor</h3><p>The format of a field descriptor is <code>[class signature]-&gt;[field name]:[type signature]</code>, such as <code>Ljava/lang/String;-&gt;count:I</code>.</p><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>In DexKit, the className/Type query parameter only supports the Java primitive syntax. For example:</p><ul><li>For primitive types, use Java PrimitiveType forms like <code>void</code>, <code>int</code>, <code>boolean</code>.</li><li>For reference types, use FullClassName forms like <code>java.lang.String</code> or <code>java/lang/String</code>.</li><li>For array types, use ArrayTypeName forms like <code>int[]</code>, <code>java.lang.String[][]</code> or <code>java/lang/String[][]</code>.</li></ul></div>',36);function p(g,f){const l=d("ExternalLinkIcon");return r(),n("div",null,[c,e("p",null,[t("Usually, you can use "),e("a",h,[t("jadx"),s(l)]),t(" to meet most of your needs. It can restore readable Java code in most cases.")]),y])}const u=i(o,[["render",p],["__file","knowledge.html.vue"]]);export{u as default};
