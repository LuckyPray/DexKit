import{_ as a,r as i,o as n,c as o,d as e,e as t,a as r,b as l}from"./app-402d39cd.js";const c={},s=l('<h1 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识" aria-hidden="true">#</a> 基础知识</h1><blockquote><p>这里提供了一些基础知识，帮助您更好的理解 <code>DexKit</code> 的使用，已经掌握的开发者可以跳过这一章节。</p></blockquote><p>在使用 <code>DexKit</code> 时，有一些基础知识是必要的，其中包括但不限于以下内容：</p><ul><li>Dex 反编译工具</li><li>JVM 签名 <ul><li>原始类型签名</li><li>引用类型签名</li><li>数组类型签名</li><li>方法签名</li><li>字段签名</li></ul></li></ul><div class="custom-container warning"><p class="custom-container-title">注意</p><p>基础知识中的内容<u><strong>不一定完全准确</strong></u>，请根据自己的见解酌情阅读，若发现内容有误，欢迎指正并帮助改进。</p></div><h2 id="反编译工具" tabindex="-1"><a class="header-anchor" href="#反编译工具" aria-hidden="true">#</a> 反编译工具</h2>',6),g={href:"https://github.com/skylot/jadx",target:"_blank",rel:"noopener noreferrer"},h=l('<h2 id="jvm-签名" tabindex="-1"><a class="header-anchor" href="#jvm-签名" aria-hidden="true">#</a> JVM 签名</h2><h3 id="原始类型-primitivetype" tabindex="-1"><a class="header-anchor" href="#原始类型-primitivetype" aria-hidden="true">#</a> 原始类型(PrimitiveType)</h3><table><thead><tr><th style="text-align:left;">类型签名</th><th style="text-align:left;">原始类型</th><th style="text-align:left;">大小（字节）</th></tr></thead><tbody><tr><td style="text-align:left;">V</td><td style="text-align:left;">void</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">Z</td><td style="text-align:left;">boolean</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">B</td><td style="text-align:left;">byte</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">C</td><td style="text-align:left;">char</td><td style="text-align:left;">2</td></tr><tr><td style="text-align:left;">S</td><td style="text-align:left;">short</td><td style="text-align:left;">2</td></tr><tr><td style="text-align:left;">I</td><td style="text-align:left;">int</td><td style="text-align:left;">4</td></tr><tr><td style="text-align:left;">J</td><td style="text-align:left;">long</td><td style="text-align:left;">8</td></tr><tr><td style="text-align:left;">F</td><td style="text-align:left;">float</td><td style="text-align:left;">4</td></tr><tr><td style="text-align:left;">D</td><td style="text-align:left;">double</td><td style="text-align:left;">8</td></tr></tbody></table><h3 id="引用类型-referencetype" tabindex="-1"><a class="header-anchor" href="#引用类型-referencetype" aria-hidden="true">#</a> 引用类型(ReferenceType)</h3><p>引用类型分为类与数组。</p><h4 id="类-classtype" tabindex="-1"><a class="header-anchor" href="#类-classtype" aria-hidden="true">#</a> 类(ClassType)</h4><p>类的类型签名都是以 <code>L</code> 开头，以 <code>;</code> 结尾，中间是类的全限定名(FullClassName)，如 <code>Ljava/lang/String;</code>。</p><p>例如:</p><table><thead><tr><th style="text-align:left;">类型签名</th><th style="text-align:left;">Java 中类型定义</th></tr></thead><tbody><tr><td style="text-align:left;">Ljava/lang/String;</td><td style="text-align:left;">java.lang.String</td></tr><tr><td style="text-align:left;">Ljava/util/List;</td><td style="text-align:left;">java.util.List</td></tr></tbody></table><h4 id="数组-arraytype" tabindex="-1"><a class="header-anchor" href="#数组-arraytype" aria-hidden="true">#</a> 数组(ArrayType)</h4><p>数组类型的类型签名以 <code>[</code> 开头，后面跟着数组元素的类型签名，如 <code>[[I</code> 表示一个二维数组，数组中的元素类型是 <code>int</code>。</p><p>例如:</p><table><thead><tr><th style="text-align:left;">类型签名</th><th style="text-align:left;">Java 中类型定义</th></tr></thead><tbody><tr><td style="text-align:left;">[I</td><td style="text-align:left;">int[]</td></tr><tr><td style="text-align:left;">[[C</td><td style="text-align:left;">char[][]</td></tr><tr><td style="text-align:left;">[Ljava/lang/String;</td><td style="text-align:left;">java.lang.String[]</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">小提示</p><p><code>类</code> 与 <code>类型</code> 并不完全等价：类型为 Type，而类为 Class。 <code>类</code> 是 <code>类型</code> 的子集。 例如：</p><ul><li><code>java.lang.Integer</code> 是 <code>类</code>，也是 <code>类型</code></li><li><code>java.lang.Integer[]</code> 是 <code>数组类型</code>，但不是 <code>类</code></li><li><code>int</code> 是 <code>原始类型</code>，但不是 <code>类</code></li></ul><p>对于方法参数，返回值类型以及字段的类型，我们统一称为 <code>类型</code> 即 <code>Type</code></p></div><h3 id="方法签名" tabindex="-1"><a class="header-anchor" href="#方法签名" aria-hidden="true">#</a> 方法签名</h3><p>方法签名由方法的返回值类型签名和参数类型签名组成，如 <code>()V</code> 表示一个无参的 <code>void</code> 方法。</p><p>例如:</p><blockquote><p>为了方便表述，表格中所有的方法都命名为 <code>function</code></p></blockquote><table><thead><tr><th style="text-align:left;">方法签名</th><th style="text-align:left;">Java 中方法定义</th></tr></thead><tbody><tr><td style="text-align:left;">()V</td><td style="text-align:left;">void function()</td></tr><tr><td style="text-align:left;">(I)V</td><td style="text-align:left;">void function(int)</td></tr><tr><td style="text-align:left;">(II)V</td><td style="text-align:left;">void function(int, int)</td></tr><tr><td style="text-align:left;">(ILjava/lang/String;J)V</td><td style="text-align:left;">void function(int, java.lang.String, long)</td></tr><tr><td style="text-align:left;">(I[II)V</td><td style="text-align:left;">void function(int, int[], int)</td></tr><tr><td style="text-align:left;">([[Ljava/lang/String;)V</td><td style="text-align:left;">void function(java.lang.String[][])</td></tr><tr><td style="text-align:left;">()[Ljava/lang/String;</td><td style="text-align:left;">java.lang.String[] function()</td></tr></tbody></table><h3 id="方法原型简写-protoshorty" tabindex="-1"><a class="header-anchor" href="#方法原型简写-protoshorty" aria-hidden="true">#</a> 方法原型简写 (ProtoShorty)</h3><p>方法原型简写是一个表示方法返回类型和参数类型的紧凑形式字符串。每个字符代表一种类型，第一个字符代表返回类型，其余字符代表参数类型。</p><h4 id="类型字符映射" tabindex="-1"><a class="header-anchor" href="#类型字符映射" aria-hidden="true">#</a> 类型字符映射</h4><table><thead><tr><th style="text-align:left;">字符</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">V</td><td style="text-align:left;">void</td><td style="text-align:left;">空类型</td></tr><tr><td style="text-align:left;">Z</td><td style="text-align:left;">boolean</td><td style="text-align:left;">布尔类型</td></tr><tr><td style="text-align:left;">B</td><td style="text-align:left;">byte</td><td style="text-align:left;">字节类型</td></tr><tr><td style="text-align:left;">S</td><td style="text-align:left;">short</td><td style="text-align:left;">短整型</td></tr><tr><td style="text-align:left;">C</td><td style="text-align:left;">char</td><td style="text-align:left;">字符类型</td></tr><tr><td style="text-align:left;">I</td><td style="text-align:left;">int</td><td style="text-align:left;">整型</td></tr><tr><td style="text-align:left;">J</td><td style="text-align:left;">long</td><td style="text-align:left;">长整型</td></tr><tr><td style="text-align:left;">F</td><td style="text-align:left;">float</td><td style="text-align:left;">单精度浮点型</td></tr><tr><td style="text-align:left;">D</td><td style="text-align:left;">double</td><td style="text-align:left;">双精度浮点型</td></tr><tr><td style="text-align:left;">L</td><td style="text-align:left;">Object</td><td style="text-align:left;">引用类型（包括对象数组和基本类型数组）</td></tr></tbody></table><h4 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h4><table><thead><tr><th style="text-align:left;">原型简写</th><th style="text-align:left;">对应的方法签名</th></tr></thead><tbody><tr><td style="text-align:left;">VL</td><td style="text-align:left;">void method(Object)</td></tr><tr><td style="text-align:left;">ZLL</td><td style="text-align:left;">boolean method(Object, Object)</td></tr><tr><td style="text-align:left;">VILFD</td><td style="text-align:left;">void method(int, Object, long, float, double)</td></tr><tr><td style="text-align:left;">LL</td><td style="text-align:left;">Object method(Object)</td></tr><tr><td style="text-align:left;">ILI</td><td style="text-align:left;">int method(Object, int)</td></tr><tr><td style="text-align:left;">LIL</td><td style="text-align:left;">Object method(int, Object)</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>在方法原型简写中，所有的引用类型（包括类、接口、数组等）都用字符 <code>L</code> 表示，这使得简写更加紧凑。 这意味着 <code>String</code>、<code>String[]</code>、<code>int[]</code> 等类型在简写中都表示为 <code>L</code>。</p></div><h2 id="dalvik-描述" tabindex="-1"><a class="header-anchor" href="#dalvik-描述" aria-hidden="true">#</a> Dalvik 描述</h2><p>在 Dex 文件中，我们可以通过 <code>Dalvik 描述</code> 的方式来表示特定的类、方法或字段。在 <code>DexKit</code> API中，通常使用 <code>descriptor</code> 来命名。</p><h3 id="类描述" tabindex="-1"><a class="header-anchor" href="#类描述" aria-hidden="true">#</a> 类描述</h3><p>类描述的格式为 <code>[类签名]</code>，如 <code>Ljava/lang/String;</code>。</p><h3 id="方法描述" tabindex="-1"><a class="header-anchor" href="#方法描述" aria-hidden="true">#</a> 方法描述</h3><p>方法描述的格式为 <code>[类签名]-&gt;[方法名][方法签名]</code>，如 <code>Ljava/lang/String;-&gt;length()I</code>。</p><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>在 <code>Dalvik 描述</code> 中，构造函数的方法名为 <code>&lt;init&gt;</code>，静态初始化函数的方法名为 <code>&lt;clinit&gt;</code>。 所以在 <code>DexKit</code> 中如果想要查找构造函数，需要使用 <code>&lt;init&gt;</code> 作为方法名。</p></div><h3 id="字段描述" tabindex="-1"><a class="header-anchor" href="#字段描述" aria-hidden="true">#</a> 字段描述</h3><p>字段描述的格式为 <code>[类签名]-&gt;[字段名]:[类型签名]</code>，如 <code>Ljava/lang/String;-&gt;count:I</code>。</p><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>DexKit 中 className/Type 查询参数只支持 Java 原始写法，例如：</p><ul><li>对于基本类型，填写 <code>void</code>，<code>int</code>，<code>boolean</code> 形式的 Java PrimitiveType</li><li>对于引用类型，填写 <code>java.lang.String</code> 或者 <code>java/lang/String</code> 形式的 FullClassName</li><li>对于数组类型，填写 <code>int[]</code>，<code>java.lang.String[][]</code> 或者 <code>java/lang/String[][]</code> 形式的 ArrayTypeName</li></ul></div>',36);function y(f,x){const d=i("ExternalLinkIcon");return n(),o("div",null,[s,e("p",null,[t("通常，您可以使用 "),e("a",g,[t("jadx"),r(d)]),t(" 来满足大部分需求， 它在大多数情况下能还原出可读的 Java 代码。")]),h])}const b=a(c,[["render",y],["__file","knowledge.html.vue"]]);export{b as default};
